# Github action to build the backend image and push it to Github Container Registry
name: Test and Build Backend Image

on:
# trigger workflow manually
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      SECRET_KEY: 'notasecret'
      DATABASE_URL: "sqlite:///your_database.db"
      SQLALCHEMY_DATABASE_URI: "sqlite:///db.sqlite3"
      SQLALCHEMY_TRACK_MODIFICATIONS: False
      SQLALCHEMY_ENGINE_OPTIONS: "nothing_of_importance"


    steps:  
    # actions/checkout@v3 is a community action that checks out your repository so your workflow can access it
    - uses: actions/checkout@v3
    - name: Set up Python 3
      uses: actions/setup-python@v3
      with:
        python-version: "3.13.1"

    - name: Set up Python virtual environment
      run: |
        cd ./backend
        python3 -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f ./backend/requirements.txt ]; then pip install -r ./backend/requirements.txt; fi

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/backend" >> $GITHUB_ENV

    - name: Test with pytest
      run: |
        source ./backend/venv/bin/activate
        coverage run -m pytest -v
        coverage report

    # - name: Test with pytest
    #   run: |
    #     coverage run -m pytest -v
    #     coverage report

    - name: Output test results and coverage
      run: |
        echo "## Test Coverage Report Summary" >> $GITHUB_STEP_SUMMARY
        coverage report | grep TOTAL | awk '{print "| Stmts | Miss | Cover. |\n| ----- | ---- | ------ |\n| " $2 " | " $3 " | " $4 " |"}' >> $GITHUB_STEP_SUMMARY

    # TODO:
    # run Bandit, SAST, DAST, etc.

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # build the backend image with the dockerfile located: containerization/
    - name: Build the backend image
      run: docker build -t ghcr.io/${{ github.repository }}/backend:latest -f containerization/Dockerfile.backend_distroless .

    # login to Github Container Registry
    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}

    # Example of logging into AWS ECR (need to add AWS creds to the repository Github secrets)
    # - name: Login to AWS ECR
    #   run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    # TODO
    # steps for pushing to AWS ECR (optional)
    # Signing the image with Docker Content Trust (optional)
    # Security Scanning the image with Trivy (optional)

    # Fetch the tags and find the latest backend tag
    - name: Fetch tags
      run: git fetch --tags

    - name: Find latest backend tag
      id: find_tag
      run: echo "TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

    # Push the backend image to Github Container Registry with the following tags: latest, commit hash and semver based off the git tag
    - name: Tag and Push the backend image
      run: |

        docker tag ghcr.io/${{ github.repository }}/backend:latest ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        docker tag ghcr.io/${{ github.repository }}/backend:latest ghcr.io/${{ github.repository }}/backend:${{ env.TAG }}

        docker push ghcr.io/${{ github.repository }}/backend:latest
        docker push ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}/backend:${{ env.TAG }}

    - name: Get image digest
      id: digest
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}/backend:latest)
          echo "DIGEST=${DIGEST}" >> $GITHUB_ENV

    # Sign the image with Cosign and attestations (metadata) (optional)
    - uses: sigstore/cosign-installer@main

    - name: Write signing key to disk (only needed for `cosign sign --key`)
      run: echo "${{ secrets.COSIGN_KEY}}" > cosign.key

    - name: Sign container image
      run: |
        cosign sign --key cosign.key  --yes \
          -a "repo=${{ github.repository }}" \
          -a "workflow=${{ github.workflow }}" \
          -a "ref=${{ github.sha }}" \
          ${{ env.DIGEST }}
      env:
        COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

    # - name: Notify Slack
    #   uses: rtCamp/action-slack-notify@v2
    #   with:
    #     status: ${{ job.status }}
    #     author_name: ${{ github.actor }}
    #     author_icon: ${{ github.actor }}
    #     title: ${{ github.repository }}
    #     text: ${{ github.sha }}
    #     fields: repo, sha, event, status, workflow, job, ref
    #     slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     slack_channel: ${{ secrets.SLACK_CHANNEL }}
    #     slack_username: ${{ secrets.SLACK_USERNAME }}

