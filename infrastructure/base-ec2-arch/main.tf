# Simple AWS arch with VPC, public and private subnet, internet gateway, route table, security group, and EC2 instance
provider "aws" {
  region  = "us-east-1"
  profile = "default"
}

# create a VPC
resource "aws_vpc" "main-basic-arch-vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "basic-arch-vpc"
  }
}

# create a public subnet
resource "aws_subnet" "public-basic-arch-subnet" {
  vpc_id     = aws_vpc.main-basic-arch-vpc.id
  cidr_block = "10.0.0.0/24"

  tags = {
    Name = "basic-arch-public"
  }
}

# create a private subnet
resource "aws_subnet" "private-basic-arch-subnet" {
  vpc_id     = aws_vpc.main-basic-arch-vpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "basic-arch-private"
  }
}

# create a key pair for ssh access
variable "generated_key_name" {
  type        = string
  default     = "aws-basic-arch-keypair"
  description = "Key-pair generated by Terraform"
}

resource "tls_private_key" "pri-key-basic-arch" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "basic-arch-generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.pri-key-basic-arch.public_key_openssh

  provisioner "local-exec" { # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.pri-key-basic-arch.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }

}

# create a security group for public instances
resource "aws_security_group" "basic-arch-public-sg" {
  name        = "basic-arch-public-sg"
  description = "Allow SSH inbound traffic"
  vpc_id      = aws_vpc.main-basic-arch-vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "basic-arch-sg"
  }
}

# EC2 instance Public(Amazon Linux 2 AMI)
resource "aws_instance" "public-web-instance" {
  ami                         = "ami-04681163a08179f28"
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.public-basic-arch-subnet.id
  key_name                    = aws_key_pair.basic-arch-generated_key.key_name
  associate_public_ip_address = true
  security_groups             = [aws_security_group.basic-arch-public-sg.id]

  tags = {
    Name = "basic-arch-public-web"
  }
}


# internet gateway for the VPC to connect to the internet
resource "aws_internet_gateway" "basic-arch-igw" {
  vpc_id = aws_vpc.main-basic-arch-vpc.id

  tags = {
    Name = "basic-arch-igw"
  }
}


# route table from public subnet to internet gateway
resource "aws_route_table" "basic-arch-public-rt" {
  vpc_id = aws_vpc.main-basic-arch-vpc.id

  route {
    cidr_block = "10.0.0.0/16"
    gateway_id = "local"
  }

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.basic-arch-igw.id
  }

    tags = {
        Name = "basic-arch-public-rt"
    }

}

# associate the route table with the public subnet
resource "aws_route_table_association" "public-basic-arch-rt-assoc" {
  subnet_id      = aws_subnet.public-basic-arch-subnet.id
  route_table_id = aws_route_table.basic-arch-public-rt.id
}

# create a security group for private instances
resource "aws_security_group" "basic-arch-private-sg" {
  name        = "basic-arch-private-sg"
  description = "Allow SSH inbound traffic"
  vpc_id      = aws_vpc.main-basic-arch-vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "basic-arch-private-sg"
    }
}

#  EC2 instance Private(Amazon Linux 2 AMI)
resource "aws_instance" "private-web-instance" {
  ami                         = "ami-04681163a08179f28"
  instance_type               = "t2.micro"
  subnet_id                   = aws_subnet.private-basic-arch-subnet.id
  key_name                    = aws_key_pair.basic-arch-generated_key.key_name
  associate_public_ip_address = false
  security_groups             = [aws_security_group.basic-arch-private-sg.id]

  tags = {
    Name = "basic-arch-private-web"
  }

}


# create a private route table
resource "aws_route_table" "basic-arch-private-rt" {
  vpc_id = aws_vpc.main-basic-arch-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.basic-arch-ngw.id
  }

    tags = {
        Name = "basic-arch-private-rt"
    }
}

# associate the private route table with the private subnet
resource "aws_route_table_association" "private-basic-arch-rt-assoc" {
  subnet_id      = aws_subnet.private-basic-arch-subnet.id # comment this when using NAT gateway
  route_table_id = aws_route_table.basic-arch-private-rt.id
}

# create Elastic IP and NAT gateway so that the private instances can connect to the internet (for updates, etc)
resource "aws_eip" "basic-arch-ngw-eip" {
  domain   = "vpc"
}

resource "aws_nat_gateway" "basic-arch-ngw" {
  allocation_id = aws_eip.basic-arch-ngw-eip.id
  subnet_id     = aws_subnet.public-basic-arch-subnet.id
  connectivity_type = "public"

  tags = {
    Name = "basic-arch-ngw"
  }
}

# output the public and private instance IPs
output "public_instance_ip" {
  value = aws_instance.public-web-instance.public_ip
}

output "private_instance_ip" {
  value = aws_instance.private-web-instance.private_ip
}

